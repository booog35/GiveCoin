Proof of work (mining)

1. Will the coin be combined proof of work and proof of stake, or only proof of stake?
2. When does proof of work (mining) stop, if at all?
3. How many coins or percentage of the total supply will be premined?
4. What will the proof of work reward schedule be? Litecoin is 50 coins per block mined indefinitely. Bitcoin is 12.5 coins per block. Ethereum is about 3 coins per block.

Proof of stake (staking)

1. What will the minimum and maximum stake age be?
2. What will the proof of stake reward schedule be? Peercoin is 1% annual return forever. Blackcoin is 5% annual return forever. Other hyper inflationary coins have variable schedules based on the block height or estimated time frames.

1. How many confirmations will be needed for transactions? (20-100) Litecoin is 100
2. What is the re-targeting (ntargettimespan). Litecoin is 3.5 days, clonecoin is 5 minutes
3. What is the average block time (ntargetspacing). Litecoin is 2.5 minuntes, clonecoin is 30 seconds
4. What is the coin max supply? Litecoin is 84 million

chainparams.cpp:101
nLastPOWBlock = 5000000;

main.cpp:918-939
// miner's coin base reward
int64_t GetProofOfWorkReward(int64_t nFees) {
    // Defaults to 100 coins per block.
    int64_t nSubsidy = 100 * COIN;

    // Premine 5% (50 millions)
    if (pindexBest->nHeight == 5) {
        nSubsidy = 50000000 * COIN;
    } else if (pindexBest->nHeight >= 0 && pindexBest->nHeight <= 2500) {
        nSubsidy = 1 * COIN;
    } else if (pindexBest->nHeight > 2500 && pindexBest->nHeight <= 10000) {
        nSubsidy = 50 * COIN;
    } else if (pindexBest->nHeight > 10000 && pindexBest->nHeight < 15000) {
        nSubsidy = 0;
    } else if (pindexBest->nHeight >= 15000 && pindexBest->nHeight <= 25000) {
        nSubsidy = 150 * COIN;
    }

    LogPrint("creation", "GetProofOfWorkReward() : create=%s nSubsidy=%d\n", FormatMoney(nSubsidy), nSubsidy);

    return nSubsidy + nFees;
}

Proof of stake (staking)

main.cpp:45-49
int nStakeMinConfirmations = 30;
unsigned int nStakeMinAge = 6 * 60 * 60; // 6 hours
unsigned int nStakeMaxAge = 2 * (60 * 60 * 24); // 2 days
unsigned int nModifierInterval = 10 * 60; // time to elapse before new modifier is computed

main.cpp:941-951
// miner's coin stake reward
uint64_t GetProofOfStakeReward(const CBlockIndex *pindexPrev, uint64_t nCoinAge, int64_t nFees) {
    uint64_t nSubsidy;

    nSubsidy = nCoinAge * GetCoinYearReward(pindexPrev->nHeight) * 33 / (365 * 33 + 8);

    LogPrint("creation", "GetProofOfStakeReward(): coinYearReward=%d create=%s nCoinAge=%d\n",
             GetCoinYearReward(pindexPrev->nHeight), FormatMoney(nSubsidy), nCoinAge);

    return nSubsidy + nFees;
}

main.cpp:2389-2394
   if (TestNet()) {
        nStakeMinAge = 600; // 10 minutes
        nStakeMaxAge = 60 * 60 * 1; // 1 hour
        nStakeMinConfirmations = 10;
        nCoinbaseMaturity = 10; // test maturity is 10 blocks
    }
	
main.h:62-115
inline int64_t GetCoinYearReward(int nHeight) {
    int64_t YearPercent = 1000;

    // POS on mainnet starts at block 2500
    if (!TestNet() && nHeight < 2500)
        YearPercent = 0;
    else if (nHeight <= 10000) {
        YearPercent = 2500;
    } else if (nHeight > 10000 && nHeight <= 25000) {
        YearPercent = 5000;
    } else if (nHeight > 25000 && nHeight <= 35000) {
        YearPercent = 500;
    } else if (nHeight > 35000 && nHeight <= 45000) {
        YearPercent = 375;
    } else if (nHeight > 45000 && nHeight <= 46000) {
        YearPercent = 500;
    } else if (nHeight > 46000 && nHeight <= 56000) {
        YearPercent = 375;
    } else if (nHeight > 56000 && nHeight <= 57000) {
        YearPercent = 500;
    } else if (nHeight > 57000 && nHeight <= 67000) {
        YearPercent = 375;
    } else if (nHeight > 67000 && nHeight <= 68000) {
        YearPercent = 500;
    } else if (nHeight > 68000 && nHeight <= 70000) {
        YearPercent = 800;
    } else if (nHeight > 70000 && nHeight <= 100000) {
        YearPercent = 500;
    } else if (nHeight > 100000 && nHeight <= 105000) {
        YearPercent = 800;
    } else if (nHeight > 105000 && nHeight <= 130000) {
        YearPercent = 500;
    } else if (nHeight > 130000 && nHeight <= 140000) {
        YearPercent = 800;
    } else if (nHeight > 140000 && nHeight <= 150000) {
        YearPercent = 500;
    } else if (nHeight > 150000 && nHeight <= 152000) {
        YearPercent = 625;
    } else if (nHeight > 152000 && nHeight <= 162000) {
        YearPercent = 500;
    } else if (nHeight > 162000 && nHeight <= 165000) {
        YearPercent = 625;
    } else if (nHeight > 165000 && nHeight <= 180000) {
        YearPercent = 500;
    } else if (nHeight > 180000 && nHeight <= 190000) {
        YearPercent = 850;
    } else if (nHeight > 190000 && nHeight <= 200000) {
        YearPercent = 1200;
    } else if (nHeight > 200000) {
        YearPercent = 375;
    }

    return YearPercent * CENT; // per year
}
	
int nCoinbaseMaturity = 30;

main.cpp:1004
static const int64_t nTargetTimespan = 16 * 60;  // 16 mins
	
main.h:33-57
/** The maximum allowed size for a serialized block, in bytes (network rule) */
static const unsigned int MAX_BLOCK_SIZE = 1000000;
/** The maximum size for mined blocks */
static const unsigned int MAX_BLOCK_SIZE_GEN = MAX_BLOCK_SIZE / 2;
/** The maximum size for transactions we're willing to relay/mine **/
static const unsigned int MAX_STANDARD_TX_SIZE = MAX_BLOCK_SIZE_GEN / 5;
/** The maximum allowed number of signature check operations in a block (network rule) */
static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE / 50;
/** Maxiumum number of signature check operations in an IsStandard() P2SH script */
static const unsigned int MAX_P2SH_SIGOPS = 15;
/** The maximum number of sigops we're willing to relay/mine in a single tx */
static const unsigned int MAX_TX_SIGOPS = MAX_BLOCK_SIGOPS / 5;
/** The maximum number of orphan transactions kept in memory */
static const unsigned int MAX_ORPHAN_TRANSACTIONS = MAX_BLOCK_SIZE / 100;
/** Default for -maxorphanblocksmib, maximum number of memory to keep orphan blocks */
static const unsigned int DEFAULT_MAX_ORPHAN_BLOCKS = 40;
/** The maximum number of entries in an 'inv' protocol message */
static const unsigned int MAX_INV_SZ = 50000;
/** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */
static const int64_t MIN_TX_FEE = 10000;
/** Fees smaller than this (in satoshi) are considered zero fee (for relaying) */
static const int64_t MIN_RELAY_TX_FEE = MIN_TX_FEE;
/** No amount larger than this (in satoshi) is valid */
static const int64_t MAX_MONEY = 1000000000 * COIN; // 1 Billion CAP
inline bool MoneyRange(int64_t nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }


main.h:119-126
inline unsigned int GetTargetSpacing(int nHeight) {
    // Starting at block 20k we raise the average block time to 4 minutes.
    if (nHeight >= 20000)
        return 240;

    // defaults to 2 minutes.
    return 120;
}